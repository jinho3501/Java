package 객체지향프로그래밍;

public class Person {
	
	// 나를 객체로 만들어보기!
	
	// 클래스 : 설계도 -> 설계만 진행을 하는 것이라서 main메소드가 필요X
	// 객체 : 설계도로 만들어진 결과물 -> 실행을 해야해서 main메소드 필요O
	
	// Person에게 필요한 특징 -> 이름, 나이, 성별, 키, 몸무게, 신발사이즈 ...
	// -> 데이터로 표현될 수 있는 것들 -> 클래스의 필드 == 객체의 특성(속성)
	String name;
	int age;
	String gender;
	
	// Person() 생성자 메소드 만들기
	// 생성자 메소드 : 객체가 생성되는 순간(new)에 자동으로 호출되는 메소드
	// 			  : 객체 생성과 동시에 필드에 값을 적용 가능하기 때문에
	//              주로 객체의 필드값을 초기화하는 목적으로 사용
	
	// 생성자 메소드 특징
	// 1. 메소드의 이름은 클래스의 이름과 동일하다.
	// 2. 리턴타입(반환값) 없다. void도 작성X
	// 3. 생성자메소드는 new 키워드를 통해서만 호출 가능.
	//    객체를 생성할 때 한번만 호출되는 메소드
	public Person(String name, int age, String gender) {
		// this : 현재 객체를 가르키는 키워드
		name = name;
		this.age = age;
		this.gender = gender;
	}
	
	// 4. 생성자 메소드도 오버로딩(중복정의)가 가능하다.
	// 오버로딩 : 메소드이름을 같게 하고 매개변수의 개수나 타입을 다르게하여
	//          하나의 메소드 이름으로 여러 기능을 구현하는 기법
	// 기본 생성자, dafault 생성자
	// 생성자가 없는 클래스는 존재하지 않음.
	// 객체를 생성할 때, 생성자가 없는 경우는 컴파일을 할 때 기본생성자가 자동으로 생성 
	// But, 생성자가 하나 이상 존재하는 경우는 기본생성자가 자동생성되지 않는다.
	public Person() {
		
	}


	// 사람이 할 수 있는 행위(기능) -> 먹기, 자기, 놀기, 운동 등등
	// -> 클래스의 메소드
	public void eat() {
		System.out.println("탕수육 냠냠");
	}
	
	public void sleep() {
		System.out.println("7시간 쿨쿨");
	}
	
	public void play() {
		System.out.println("게임하기~");
	}
	
	

}
